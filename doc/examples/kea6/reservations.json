# This is an example configuration file for DHCPv6 server in Kea
# that showcases how to do host reservations. It is
# assumed that one subnet (2001:db8:1::/64) is available directly
# over ethX interface. A number of hosts have various combinations
# of addresses and prefixes reserved for them.

{ "Dhcp6":

{
# Kea is told to listen on ethX interface only.
  "interfaces-config": {
    "interfaces": [ "ethX" ]
  },

# We need to specify lease type. As of May 2014, three backends are supported:
# memfile, mysql and pgsql. We'll just use memfile, because it doesn't require
# any prior set up.
  "lease-database": {
    "type": "memfile"
  },

# This is pretty basic stuff, it has nothing to do with reservations.
  "preferred-lifetime": 3000,
  "valid-lifetime": 4000,
  "renew-timer": 1000,
  "rebind-timer": 2000,

# Kea supports two types of identifiers in DHCPv6: hw-address (hardware/MAC address
# of the client) and duid (DUID inserted by the client). When told to do so, Kea can
# check for each of these identifier types, but it takes a costly database lookup
# to do so. It is therefore useful from a performance perspective to use only
# the reservation types that are actually used in a given network.
    "host-reservation-identifiers": [ "duid", "hw-address" ],

# The following list defines subnets. Subnet, pools and interface definitions
# are the same as in the regular scenario, without host reservations.
# least subnet and pool entries.
  "subnet6": [
    {
      "subnet": "2001:db8:1::/48",

      "pools": [ { "pool": "2001:db8:1::/80" } ],

      "pd-pools": [
          {
              "prefix": "2001:db8:1:8000::",
              "prefix-len": 56,
              "delegated-len": 64
          }
      ],
      "interface": "ethX",

# Host reservations. Define several reservations, note that
# they are all within the range of the pool of the dynamically
# allocated address. The server will exclude the addresses from this
# pool and only assign them to the client which has a reservation for
# them.
      "reservations": [
# This is a simple host reservation. The host with DUID matching
# the specified value will get an address of 2001:db8:1::100.
          {
              "duid": "01:02:03:04:05:0A:0B:0C:0D:0E",
              "ip-addresses": [ "2001:db8:1::100" ]
          },
# This is similar to the previous one, but this time the reservation is done
# based on hardware/MAC address. The server will do its best to extract
# the hardware/MAC address from received packets (see 'mac-sources' directive
# for details). This particular reservation also specifies two extra options
# to be available for this client. If there are options with the same code
# specified in a global, subnet or class scope, the values defined at host level
# take precedence.
          {
              "hw-address": "00:01:02:03:04:05",
              "ip-addresses": [ "2001:db8:1::101" ],
              "option-data": [
              {
                  "name": "dns-servers",
                  "data": "3000:1::234"
              },
              {
                  "name": "nis-servers",
                  "data": "3000:1::234"
              }]
          },
# This is a bit more advanced reservation. The client with the specified
# DUID will get a reserved address, a reserved prefix and a hostname.
# This reservation is for an address that it not within the dynamic pool.
# Finally, this reservation features vendor specific options for CableLabs,
# which happen to use enterprise-id 4491. Those particular values will
# be returned only to the client that has a DUID matching this reservation.
          {
              "duid": "01:02:03:04:05:06:07:08:09:0A",
              "ip-addresses": [ "2001:db8:1:cafe::1" ],
              "prefixes": [ "2001:db8:2:abcd::/64" ],
              "hostname": "foo.example.com",
              "option-data": [ {
                  "name": "vendor-opts",
                  "data": "4491"
              },
              {
                  "name": "tftp-servers",
                  "space": "vendor-4491",
                  "data": "3000:1::234"
              } ]

          }
      ]
    }
  ]
},

# The following configures logging. Kea will log all debug messages
# to /var/log/kea-debug.log file.
"Logging": {
    "loggers": [
        {
            "name": "kea-dhcp6",
            "output_options": [
                {
                    "output": "/var/log/kea-debug.log"
                }
            ],
            "debuglevel": 99,
            "severity": "DEBUG"
        }
    ]
}

}
