NameserverEntry:
* Reuse data on timeout/requery

The NSAS itself:
* Implement/recreate

Long term:
* Make a mechanism the cache (which does not exist at the time of writing this
  note) will be able to notify the NSAS that something has changed (address,
  new nameserver, etc). Because the cache will have access to the data and
  knows when it changes (it updates its structures), it is the best place. It
  will be caching even data like authority and additional sections. It will
  notify us somehow (we will need to tell it when).
* Optimisation to pass max two outstanding queries on the network (but fetch
  everything from cache right away).
* Add the cache cookies/contexts.
* Logging.
* Remove LRU from the nameserver entries, drop them when they are not
  referenced by any zone entry. This will remove duplicates, keep the RTTs
  longer and will provide access to everything that exists. This is
  tricky, though, because we need to be thread safe. There seems to be
  solution to:
  - Reimplement shared_ptr (or subclass it, if it is possible)
  - Have weak pointers on the hash table
  - We need to lock the hash table entry when we are about to reach 0
    so noone gets a reference when we are removing/destroing it. Then
    we need to check the count once again, someone might have acquired
    the reference before we got the lock (the chance is small, so the
    overhead should not matter, but it would crash the application)
* Selection algorithm
