# Copyright (C) 2011  Internet Systems Consortium, Inc. ("ISC")
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

# $Id$

$PREFIX MSG_
$NAMESPACE ::

# \brief Message Utility Message File
#
# This is the source of the set of messages generated by the message and logging
# components.  The associated .h and .cc files are created by hand from this
# file though and are not built during the build process; this is to avoid the
# chicken-and-egg situation where we need the files to build the message
# compiler, yet we need the compiler to build the files.

DUPLNS    duplicate $NAMESPACE directive found
+ When reading a message file, more than one $NAMESPACE directive was found.  In
+ this version of the code, such a condition is regarded as an error and the
+ read will be abandonded.

DUPLPRFX    duplicate $PREFIX directive found
+ When reading a message file, more than one $PREFIX directive was found.  In
+ this version of the code, such a condition is regarded as an error and the
+ read will be abandonded.

IDNOTFND    could not replace message for '%s': no such message identification
+ During start-up a local message file was read.  A line with the listed
+ message identification was found in the file, but the identification is not
+ one contained in the compiled-in message dictionary.  Either the message
+ identification has been mis-spelled in the file, or the local file was used
+ for an earlier version of the software and the message with that
+ identification has been removed.
+
+ This message may appear a number of times in the file, once for every such
+ unknown mnessage identification.

NSEXTRARG  $NAMESPACE directive has too many arguments
+ The $NAMESPACE directive takes a single argument, a namespace in which all the
+ generated symbol names are placed.  This error is generated when the
+ compiler finds a $NAMESPACE directive with more than one argument.

NSINVARG   $NAMESPACE directive has an invalid argument ('%s')
+ The $NAMESPACE argument should be a valid C++ namespace.  The reader does a
+ cursory check on its validity, checking that the characters in the namspace
+ are correct.  The error is generated when the reader finds an invalid
+ character. (Valid are alphanumeric characters, underscroes and colons.)

NSNOARG    no arguments were given to the $NAMESPACE directive
+ The $NAMESPACE directive takes a single argument, a namespace in which all the
+ generated symbol names are placed.  This error is generated when the
+ compiler finds a $NAMESPACE directive with no arguments.

ONETOKEN    a line containing a message ID ('%s') and nothing else was found
+ Message definitions comprise lines starting with a message identification (a
+ symbolic name for the message) and followed by the text of the message.  This
+ error is generated when a line is found in the message file that contains just
+ the message identification.

OPENIN      unable to open message file %s for input: %s
+ The program was not able to open the specified input message file for the
+ reason given.

OPENOUT     unable to open %s for output: %s
+ The program was not able to open the specified output file for the reason
+ given.

PRFEXTRARG  $PREFIX directive has too many arguments
+ The $PREFIX directive takes a single argument, a prefix to be added to the
+ symbol names when a C++ .h file is created.  This error is generated when the
+ compiler finds a $PREFIX directive with more than one argument.

PRFINVARG   $PREFIX directive has an invalid argument ('%s')
+ The $PREFIX argument is used in a symbol name in a C++ header file.  As such,
+ it must adhere to restrictions on C++ symbol names (e.g. may only contain
+ alphanumeric characters or underscores, and may nor start with a digit).  A
+ $PREFIX directive was found with an argument (given in the message) that
+ violates those restictions.

PRFNOARG    no arguments were given to the $PREFIX directive
+ The $PREFIX directive takes a single argument, a prefix to be added to the
+ symbol names when a C++ .h file is created.  This error is generated when the
+ compiler finds a $PREFIX directive with no arguments.

READERR     error reading from %s: %s
+ The specified error was encountered reading from the named input file.

UNRECDIR    unrecognised directive '%s'
+ A line starting with a dollar symbol was found, but the first word on the line
+ (shown in the message) was not a recognised message compiler directive.

WRITERR     error writing to %s: %s
+ The specified error was encountered writing to the named output file.
