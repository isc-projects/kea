<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
<!ENTITY mdash  "&#x2014;" >
<!ENTITY % version SYSTEM "version.ent">
%version;
]>

<!--
 - Copyright (C) 2010-2011  Internet Systems Consortium, Inc. ("ISC")
 -
 - Permission to use, copy, modify, and/or distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->

<book>
  <?xml-stylesheet href="bind10-guide.css" type="text/css"?>

  <bookinfo>
    <title>BIND 10 Guide</title>
    <subtitle>Administrator Reference for BIND 10</subtitle>

    <copyright>
      <year>2010-2011</year><holder>Internet Systems Consortium, Inc.</holder>
    </copyright>

    <abstract>
      <para>BIND 10 is a Domain Name System (DNS) suite managed by
	Internet Systems Consortium (ISC). It includes DNS libraries
	and modular components for controlling authoritative and
	recursive DNS servers.
      </para>
      <para>
        This is the reference guide for BIND 10 version &__VERSION__;.
	The most up-to-date version of this document, along with
	other documents for BIND 10, can be found at <ulink
	url="http://bind10.isc.org/docs"/>.  </para> </abstract>

      <releaseinfo>This is the reference guide for BIND 10 version
        &__VERSION__;.</releaseinfo>

  </bookinfo>

  <chapter id="intro">
    <title>Introduction</title>
    <para>
      BIND is the popular implementation of a DNS server, developer
      interfaces, and DNS tools.
      BIND 10 is a rewrite of BIND 9.  BIND 10 is written in C++ and Python
      and provides a modular environment for serving and maintaining DNS.
    </para>

    <note>
      <para>
        This guide covers the experimental prototype of
        BIND 10 version &__VERSION__;.
      </para>
    </note>

    <note>
      <para>
        BIND 10 provides a EDNS0- and DNSSEC-capable
        authoritative DNS server and a caching recursive name server
        which also provides forwarding.
      </para>
    </note>

    <section>
      <title>Supported Platforms</title>
      <para>
  BIND 10 builds have been tested on Debian GNU/Linux 5,
  Ubuntu 9.10, NetBSD 5, Solaris 10, FreeBSD 7 and 8, and CentOS
  Linux 5.3.

  It has been tested on Sparc, i386, and amd64 hardware
  platforms.

        It is planned for BIND 10 to build, install and run on
        Windows and standard Unix-type platforms.
      </para>
    </section>

    <section>
      <title>Required Software</title>
      <para>
        BIND 10 requires Python 3.1.  Later versions may work, but Python
        3.1 is the minimum version which will work.
      </para>

      <para>
	BIND 10 uses the Botan crypto library for C++. It requires
	at least Botan version 1.8.
      </para>

      <para>
	BIND 10 uses the log4cplus C++ logging library. It requires
	at least log4cplus version 1.0.3.
      </para>

      <para>
	The authoritative server requires SQLite 3.3.9 or newer.
	The <command>b10-xfrin</command>, <command>b10-xfrout</command>,
	and <command>b10-zonemgr</command> modules require the
	libpython3 library and the Python _sqlite3.so module.
      </para>
<!-- TODO: this will change ... -->

<!-- TODO: list where to get these from -->

      <note>
        <para>
          Some operating systems do not provide these dependencies
          in their default installation nor standard packages
          collections.
          You may need to install them separately.
        </para>
      </note>
    </section>

    <section id="starting_stopping">
      <title>Starting and Stopping the Server</title>

      <para>
        BIND 10 is modular.  Part of this modularity is
        accomplished using multiple cooperating processes which, together,
	provide the server functionality.  This is a change from
	the previous generation of BIND software, which used a
	single process.
      </para>

      <para>
	At first, running many different processes may seem confusing.
	However, these processes are started, stopped, and maintained
	by a single command, <command>bind10</command>.
	This command starts a master process which will start other
	processes as needed.
	The processes started by the <command>bind10</command>
	command have names starting with "b10-", including:
      </para>

      <para>

        <itemizedlist>

          <listitem>
            <simpara>
              <command>b10-msgq</command> &mdash;
              Message bus daemon.
              This process coordinates communication between all of the other
              BIND 10 processes.
            </simpara>
          </listitem>

          <listitem>
            <simpara>
              <command>b10-auth</command> &mdash;
              Authoritative DNS server.
              This process serves DNS requests.
            </simpara>
          </listitem>

          <listitem>
            <simpara>
              <command>b10-cfgmgr</command> &mdash;
              Configuration manager.
              This process maintains all of the configuration for BIND 10.
            </simpara>
          </listitem>

          <listitem>
            <simpara>
              <command>b10-cmdctl</command> &mdash;
              Command and control service.
              This process allows external control of the BIND 10 system.
            </simpara>
          </listitem>

          <listitem>
            <simpara>
              <command>b10-resolver</command> &mdash;
              Recursive name server.
              This process handles incoming queries.
<!-- TODO: -->
            </simpara>
          </listitem>

          <listitem>
            <simpara>
              <command>b10-stats</command> &mdash;
              Statistics collection daemon.
              This process collects and reports statistics data.
            </simpara>
          </listitem>

          <listitem>
            <simpara>
              <command>b10-xfrin</command> &mdash;
              Incoming zone transfer service.
              This process is used to transfer a new copy
              of a zone into BIND 10, when acting as a secondary server.
            </simpara>
          </listitem>

          <listitem>
            <simpara>
              <command>b10-xfrout</command> &mdash;
              Outgoing zone transfer service.
	      This process is used to handle transfer requests to
	      send a local zone to a remote secondary server,
	      when acting as a master server.
            </simpara>
          </listitem>

          <listitem>
            <simpara>
              <command>b10-zonemgr</command> &mdash;
              Secondary manager.
	      This process keeps track of timers and other
              necessary information for BIND 10 to act as a slave server.
            </simpara>
          </listitem>

        </itemizedlist>
      </para>

      <para>
	These are ran automatically by <command>bind10</command>
	and do not need to be run manually.
      </para>

    </section>

    <section id="managing_once_running">
      <title>Managing BIND 10</title>
      
      <para>
	Once BIND 10 is running, a few commands are used to interact
	directly with the system:
        <itemizedlist>
          <listitem>
            <simpara>
              <command>bindctl</command> &mdash;
              interactive administration interface.
              This is a command-line tool which allows an administrator
              to control BIND 10.
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <command>b10-loadzone</command> &mdash;
              zone file loader.
              This tool will load standard masterfile-format zone files into
              BIND 10.
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <command>b10-cmdctl-usermgr</command> &mdash;
              user access control.
              This tool allows an administrator to authorize additional users
              to manage BIND 10.
            </simpara>
          </listitem>
  <!-- TODO usermgr -->
        </itemizedlist>
      </para>
    </section>

    <para>
      The tools and modules are covered in full detail in this guide.
<!-- TODO point to these -->
      In addition, manual pages are also provided in the default installation.
    </para>
      
<!--
bin/
  bindctl*
  host*
lib/
  libauth
  libdns
  libexceptions
  python3.1/site-packages/isc/{cc,config}
sbin/
  bind10
share/
  share/bind10/
    auth.spec
    b10-cmdctl.pem
    bob.spec
    passwd.csv
  man/
var/
  bind10/b10-config.db
-->

    <para>
      BIND 10 also provides libraries and programmer interfaces
      for C++ and Python for the message bus, configuration backend,
      and, of course, DNS. These include detailed developer
      documentation and code examples.
<!-- TODO point to this -->
    </para>

  </chapter>

  <chapter id="installation">
    <title>Installation</title>

    <section>
      <title>Building Requirements</title>

        <para>
          In addition to the run-time requirements, building BIND 10
          from source code requires various development include headers.
        </para>

        <note>
          <simpara>
            Some operating systems have split their distribution packages into
            a run-time and a development package.  You will need to install
            the development package versions, which include header files and
            libraries, to build BIND 10 from source code.
          </simpara>
        </note>

        <para>
          Building from source code requires the Boost
          build-time headers. At least Boost version 1.35 is required.
  <!-- TODO: we don't check for this version -->
  <!-- NOTE: jreed has tested with 1.34, 1.38, and 1.41. -->
        </para>

        <para>
	  To build BIND 10, also install the Botan (at least version
	  1.8) and the log4cplus (at least version 1.0.3)
          development include headers.
        </para>

<!--
TODO
Debian and Ubuntu:
 libgmp3-dev and libbz2-dev required for botan too
-->

        <para>
<!-- TODO: is this needed at build time? test time? -->
	  The Python Library and Python _sqlite3 module are required to
          enable the Xfrout and Xfrin support.
        </para>

        <note><simpara>
          The Python related libraries and modules need to be built
          for Python 3.1.
        </simpara></note>

        <para>
          Building BIND 10 also requires a C++ compiler and
          standard development headers, make, and pkg-config.
          BIND 10 builds have been tested with GCC g++ 3.4.3, 4.1.2,
          4.1.3, 4.2.1, 4.3.2, and 4.4.1; Clang++ 2.8; and Sun C++ 5.10.
        </para>
    </section>

    <section id="quickstart">
      <title>Quick start</title>
      <note>
        <simpara>
          This quickly covers the standard steps for installing
          and deploying BIND 10 as an authoritative name server using
          its defaults. For troubleshooting, full customizations and further
          details, see the respective chapters in the BIND 10 guide.
        </simpara>
      </note>

      <para>
        To quickly get started with BIND 10, follow these steps.
      </para>

      <orderedlist>
    
        <listitem>
          <simpara>
            Install required build dependencies.
          </simpara>
        </listitem>

        <listitem>
          <simpara>
            Download the BIND 10 source tar file from
            <ulink url="ftp://ftp.isc.org/isc/bind10/"/>.
          </simpara>
        </listitem>

        <listitem>
          <para>Extract the tar file:
          <screen>$ <userinput>gzcat bind10-<replaceable>VERSION</replaceable>.tar.gz | tar -xvf -</userinput></screen>
          </para>
        </listitem>

        <listitem>
          <para>Go into the source and run configure:
            <screen>$ <userinput>cd bind10-<replaceable>VERSION</replaceable></userinput>
  $ <userinput>./configure</userinput></screen>
          </para>
        </listitem>

        <listitem>
          <para>Build it:
            <screen>$ <userinput>make</userinput></screen>
          </para>
        </listitem>

        <listitem>
          <para>Install it (to default /usr/local):
            <screen>$ <userinput>make install</userinput></screen>
          </para>
        </listitem>

        <listitem>
          <para>Start the server:
            <screen>$ <userinput>/usr/local/sbin/bind10</userinput></screen>
          </para>
        </listitem>

        <listitem>

         <para>Test it; for example:
            <screen>$ <userinput>dig @127.0.0.1 -c CH -t TXT authors.bind</userinput></screen>
         </para>
        </listitem>

        <listitem>
          <para>Load desired zone file(s), for example:
            <screen>$ <userinput>b10-loadzone <replaceable>your.zone.example.org</replaceable></userinput></screen>
          </para>
        </listitem>

        <listitem>
          <simpara>
            Test the new zone.
          </simpara>
        </listitem>

      </orderedlist>

    </section>

    <section id="install">
      <title>Installation from source</title>
      <para>
        BIND 10 is open source software written in C++ and Python.
        It is freely available in source code form from ISC via
        the Git code revision control system or as a downloadable
        tar file. It may also be available in pre-compiled ready-to-use
        packages from operating system vendors.
      </para>

      <section>
        <title>Download Tar File</title>
        <para>
          Downloading a release tar file is the recommended method to
          obtain the source code.
        </para>
        
        <para>
          The BIND 10 releases are available as tar file downloads from
          <ulink url="ftp://ftp.isc.org/isc/bind10/"/>.
          Periodic development snapshots may also be available.
        </para>
  <!-- TODO -->
      </section>

      <section>
        <title>Retrieve from Git</title>
        <para>
          Downloading this "bleeding edge" code is recommended only for
          developers or advanced users.  Using development code in a production
          environment is not recommended.
        </para>

        <note>
          <para>
            When using source code retrieved via Git additional
            software will be required:  automake (v1.11 or newer),
            libtoolize, and autoconf (2.59 or newer).
            These may need to be installed.
          </para>
        </note>

        <para>
          The latest development code, including temporary experiments
          and un-reviewed code, is available via the BIND 10 code revision
          control system. This is powered by Git and all the BIND 10
          development is public.
          The leading development is done in the <quote>master</quote>.
        </para>
        <para>
          The code can be checked out from
          <filename>git://bind10.isc.org/bind10</filename>;
          for example:

        <screen>$ <userinput>git clone git://bind10.isc.org/bind10</userinput></screen>
        </para>

        <para>
          When checking out the code from
          the code version control system, it doesn't include the
          generated configure script, Makefile.in files, nor the
          related configure files.
          They can be created by running <command>autoreconf</command>
          with the <option>--install</option> switch.
          This will run <command>autoconf</command>,
          <command>aclocal</command>,
          <command>libtoolize</command>,
          <command>autoheader</command>,
          <command>automake</command>,
          and related commands.
        </para>

      </section>


      <section>
        <title>Configure before the build</title>
        <para>
          BIND 10 uses the GNU Build System to discover build environment
          details.
          To generate the makefiles using the defaults, simply run:
          <screen>$ <userinput>./configure</userinput></screen>
        </para>
        <para>
          Run <command>./configure</command> with the <option>--help</option>
          switch to view the different options. The commonly-used options are:

          <variablelist>

          <varlistentry>
            <term>--prefix</term>
            <listitem>
              <simpara>Define the installation location (the
                default is <filename>/usr/local/</filename>).
              </simpara>
            </listitem> 
          </varlistentry>

          <varlistentry>
            <term>--with-boost-include</term>
            <listitem> 
              <simpara>Define the path to find the Boost headers.
              </simpara>
            </listitem> 
          </varlistentry>

          <varlistentry>
            <term>--with-pythonpath</term>
            <listitem> 
              <simpara>Define the path to Python 3.1 if it is not in the
                standard execution path.
              </simpara>
            </listitem> 
          </varlistentry>

          <varlistentry>
            <term>--with-gtest</term>
            <listitem> 
              <simpara>Enable building the C++ Unit Tests using the
                Google Tests framework. Optionally this can define the
                path to the gtest header files and library.
              </simpara>
            </listitem> 
          </varlistentry>

          </variablelist>

        </para>
  <!-- TODO: lcov -->

        <para>
          For example, the following configures it to
    find the Boost headers, find the
    Python interpreter, and sets the installation location:

          <screen>$ <userinput>./configure \
      --with-boost-include=/usr/pkg/include \
      --with-pythonpath=/usr/pkg/bin/python3.1 \
      --prefix=/opt/bind10</userinput></screen>
        </para>

        <para>
          If the configure fails, it may be due to missing or old
          dependencies.
        </para>

      </section>

      <section>
        <title>Build</title>
        <para>
    After the configure step is complete, to build the executables
    from the C++ code and prepare the Python scripts, run:

          <screen>$ <userinput>make</userinput></screen>
        </para>
      </section>

      <section>
        <title>Install</title>
        <para>
          To install the BIND 10 executables, support files,
          and documentation, run:
          <screen>$ <userinput>make install</userinput></screen>
        </para>
        <note>
          <para>The install step may require superuser privileges.</para>
        </note>

      </section>

  <!-- TODO: tests -->

      <section>
        <title>Install Hierarchy</title>
        <para>
          The following is the layout of the complete BIND 10 installation:
          <itemizedlist>
            <listitem>
              <simpara>
                <filename>bin/</filename> &mdash;
                general tools and diagnostic clients.
              </simpara>
            </listitem>
            <listitem>
            <simpara>
              <filename>etc/bind10-devel/</filename> &mdash;
              configuration files.
            </simpara>
            </listitem>
            <listitem>
              <simpara>
                <filename>lib/</filename> &mdash;
                libraries and python modules.
              </simpara>
            </listitem>
            <listitem>
              <simpara>
                <filename>libexec/bind10-devel/</filename> &mdash;
                executables that a user wouldn't normally run directly and
                are not run independently.
                These are the BIND 10 modules which are daemons started by
                the <command>bind10</command> tool.
              </simpara>
            </listitem>
            <listitem>
              <simpara>
                <filename>sbin/</filename> &mdash;
                commands used by the system administrator.
              </simpara>
            </listitem>
            <listitem>
              <simpara>
                <filename>share/bind10-devel/</filename> &mdash;
                configuration specifications.
              </simpara>
            </listitem>
            <listitem>
              <simpara>
                <filename>share/man/</filename> &mdash;
                manual pages (online documentation).
              </simpara>
            </listitem>
            <listitem>
              <simpara>
                <filename>var/bind10-devel/</filename> &mdash;
                data source and configuration databases.
              </simpara>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>

  <!--
      <section id="install.troubleshooting">
        <title>Troubleshooting</title>
        <para>
        </para>
      </section>
  -->
  
  </chapter>

  <chapter id="bind10">
    <title>Starting BIND10 with <command>bind10</command></title>
    <para>
      BIND 10 provides the <command>bind10</command> command which 
      starts up the required processes.
      <command>bind10</command>
      will also restart processes that exit unexpectedly.
      This is the only command needed to start the BIND 10 system.
    </para>

    <para>
      After starting the <command>b10-msgq</command> communications channel,
      <command>bind10</command> connects to it, 
      runs the configuration manager, and reads its own configuration.
      Then it starts the other modules.
    </para>

    <para>
      The <command>b10-msgq</command> and <command>b10-cfgmgr</command>
      services make up the core. The <command>b10-msgq</command> daemon
      provides the communication channel between every part of the system.
      The <command>b10-cfgmgr</command> daemon is always needed by every
      module, if only to send information about themselves somewhere,
      but more importantly to ask about their own settings, and
      about other modules.
      The <command>bind10</command> master process will also start up
      <command>b10-cmdctl</command> for admins to communicate with the
      system, <command>b10-auth</command> for authoritative DNS service or
      <command>b10-resolver</command> for recursive name service,
      <command>b10-stats</command> for statistics collection,
      <command>b10-xfrin</command> for inbound DNS zone transfers,
      <command>b10-xfrout</command> for outbound DNS zone transfers,
      and <command>b10-zonemgr</command> for secondary service.
    </para>

    <section id="start">
      <title>Starting BIND 10</title>
      <para>
        To start the BIND 10 service, simply run <command>bind10</command>.
        Run it with the <option>--verbose</option> switch to
        get additional debugging or diagnostic output.
      </para>
<!-- TODO: note it doesn't go into background -->

      <note>
        <para>
          If the setproctitle Python module is detected at start up,
          the process names for the Python-based daemons will be renamed
          to better identify them instead of just <quote>python</quote>.
          This is not needed on some operating systems.
        </para>
      </note>

    </section>

  </chapter>

  <chapter id="msgq">
    <title>Command channel</title>

      <para>
        The BIND 10 components use the <command>b10-msgq</command>
        message routing daemon to communicate with other BIND 10 components.
        The <command>b10-msgq</command> implements what is called the
        <quote>Command Channel</quote>.
        Processes intercommunicate by sending messages on the command
        channel.
        Example messages include shutdown, get configurations, and set
        configurations.
        This Command Channel is not used for DNS message passing.
        It is used only to control and monitor the BIND 10 system.
      </para>

      <para>
        Administrators do not communicate directly with the
        <command>b10-msgq</command> daemon.
        By default, BIND 10 uses port 9912 for the
        <command>b10-msgq</command> service.
        It listens on 127.0.0.1.
      </para>
      
<!-- TODO: this is broken, see Trac #111
      <para>
        To select an alternate port for the <command>b10-msgq</command> to
        use, run <command>bind10</command> specifying the option:
        <screen> $ <userinput>bind10 -TODO-msgq-port 9912</userinput></screen>
      </para>
-->

<!-- TODO: upcoming plans:
Unix domain sockets
-->

  </chapter>

  <chapter id="cfgmgr">
    <title>Configuration manager</title>

      <para>
         The configuration manager, <command>b10-cfgmgr</command>,
         handles all BIND 10 system configuration.  It provides
         persistent storage for configuration, and notifies running
         modules of configuration changes.
      </para>

      <para>
        The <command>b10-auth</command> and <command>b10-xfrin</command>
        daemons and other components receive their configurations
        from the configuration manager over the <command>b10-msgq</command>
        command channel.
      </para>

      <para>The administrator doesn't connect to it directly, but
        uses a user interface to communicate with the configuration
        manager via <command>b10-cmdctl</command>'s REST-ful interface.
        <command>b10-cmdctl</command> is covered in <xref linkend="cmdctl"/>.
      </para>

<!-- TODO -->
      <note>
        <para>
          The development prototype release only provides the
          <command>bindctl</command> as a user interface to
          <command>b10-cmdctl</command>.
          Upcoming releases will provide another interactive command-line
          interface and a web-based interface.
        </para>
      </note>

      <para>
        The <command>b10-cfgmgr</command> daemon can send all
        specifications and all current settings to the
        <command>bindctl</command> client (via
        <command>b10-cmdctl</command>).
      </para>

      <para>
        <command>b10-cfgmgr</command> relays configurations received
        from <command>b10-cmdctl</command> to the appropriate modules.
      </para>
<!-- TODO:
        Configuration settings for itself are defined as ConfigManager.
TODO: show examples
-->

<!-- TODO:
config changes are actually commands to cfgmgr
-->

<!-- TODO: what about run time config to change this? -->
<!-- jelte: > config set cfgmgr/config_database <file> -->
<!-- TODO: what about command line switch to change this? -->
      <para>
        The stored configuration file is at
        <filename>/usr/local/var/bind10-devel/b10-config.db</filename>.
        (The full path is what was defined at build configure time for
        <option>--localstatedir</option>.
        The default is <filename>/usr/local/var/</filename>.)
        The format is loosely based on JSON and is directly parseable
        python, but this may change in a future version.
        This configuration data file is not manually edited by the
        administrator.
      </para>

<!--

Well the specfiles have a more fixed format (they must contain specific
stuff), but those are also directly parseable python structures (and
'coincidentally', our data::element string representation is the same)

loosely based on json, tweaked to be directly parseable in python, but a
subset of that.
wiki page is http://bind10.isc.org/wiki/DataElementDesign

nope, spec files are written by module developers, and db should be done
through bindctl and friends

-->

    <para>
      The configuration manager does not have any command line arguments.
      Normally it is not started manually, but is automatically
      started using the <command>bind10</command> master process
      (as covered in <xref linkend="bind10"/>).
    </para>

<!-- TODO: upcoming plans:
configuration for configuration manager itself. And perhaps we might
change the messaging protocol, but an admin should never see any of that
-->

<!-- TODO: show examples, test this -->
<!--
, so an admin can simply run bindctl,
do config show, and it shows all modules; config show >module> shows all
options for that module
-->

  </chapter>

  <chapter id="cmdctl">
    <title>Remote control daemon</title>

    <para>
      <command>b10-cmdctl</command> is the gateway between
      administrators and the BIND 10 system.
      It is a HTTPS server that uses standard HTTP Digest
      Authentication for username and password validation.
      It provides a REST-ful interface for accessing and controlling
      BIND 10.
    </para>
<!-- TODO: copy examples from wiki, try with wget -->

    <para>
      When <command>b10-cmdctl</command> starts, it firsts
      asks <command>b10-cfgmgr</command> about what modules are
      running and what their configuration is (over the
      <command>b10-msgq</command> channel). Then it will start listening
      on HTTPS for clients &mdash; the user interface &mdash; such
      as <command>bindctl</command>.
    </para>

    <para>
      <command>b10-cmdctl</command> directly sends commands
      (received from the user interface) to the specified component.
      Configuration changes are actually commands to
      <command>b10-cfgmgr</command> so are sent there.
    </para>

<!--
TODO:
"For bindctl to list a module's available configurations and
available commands, it communicates over the cmdctl REST interface.
cmdctl then asks cfgmgr over the msgq command channel. Then cfgmgr
asks the module for its specification and also cfgmgr looks in its
own configuration database for current values."

(05:32:03) jelte: i think cmdctl doesn't request it upon a incoming
GET, but rather requests it once and then listens in for updates,
but you might wanna check with likun
-->

<!-- TODO: replace /usr/local -->
<!-- TODO: permissions -->
    <para>The HTTPS server requires a private key,
      such as a RSA PRIVATE KEY.
      The default location is at
      <filename>/usr/local/etc/bind10-devel/cmdctl-keyfile.pem</filename>.
      (A sample key is at
      <filename>/usr/local/share/bind10-devel/cmdctl-keyfile.pem</filename>.)
      It also uses a certificate located at
      <filename>/usr/local/etc/bind10-devel/cmdctl-certfile.pem</filename>.
      (A sample certificate is at
      <filename>/usr/local/share/bind10-devel/cmdctl-certfile.pem</filename>.)
      This may be a self-signed certificate or purchased from a
      certification authority.
    </para>

    <note><para>
      The HTTPS server doesn't support a certificate request from a
      client (at this time).
<!-- TODO: maybe allow request from server side -->
      The <command>b10-cmdctl</command> daemon does not provide a
      public service. If any client wants to control BIND 10, then
      a certificate needs to be first received from the BIND 10
      administrator.
      The BIND 10 installation provides a sample PEM bundle that matches
      the sample key and certificate.
    </para></note>
<!-- TODO: cross-ref -->

<!-- TODO
openssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes
but that is a single file, maybethis should go back to that format?
-->

<!--
    <para>
(08:20:56) shane: It is in theory possible to run without cmdctl.
(08:21:02) shane: I think we discussed this.
    </para>
-->

<!-- TODO: Please check https://bind10.isc.org/wiki/cmd-ctrld -->


    <para>
      The <command>b10-cmdctl</command> daemon also requires
      the user account file located at
      <filename>/usr/local/etc/bind10-devel/cmdctl-accounts.csv</filename>.
      This comma-delimited file lists the accounts with a user name,
      hashed password, and salt.
      (A sample file is at
      <filename>/usr/local/share/bind10-devel/cmdctl-accounts.csv</filename>.
      It contains the user named <quote>root</quote> with the password
      <quote>bind10</quote>.)
    </para>

    <para>
      The administrator may create a user account with the
      <command>b10-cmdctl-usermgr</command> tool.
    </para>
<!-- TODO: show example -->

<!-- TODO: does cmdctl need to be restarted to change cert or key
or accounts database -->

    <para>
      By default the HTTPS server listens on the localhost port 8080.
      The port can be set by using the <option>--port</option> command line option.
      The address to listen on can be set using the <option>--address</option> command
      line argument.
      Each HTTPS connection is stateless and timesout in 1200 seconds
      by default.  This can be
      redefined by using the <option>--idle-timeout</option> command line argument.
    </para>

    <section id="cmdctl.spec">
      <title>Configuration specification for b10-cmdctl</title>
      <para>
        The configuration items for <command>b10-cmdctl</command> are:
key_file
cert_file
accounts_file
      </para>
<!-- TODO -->

      <para>
        The control commands are:
print_settings
<!-- TODO: remove that -->

shutdown
      </para>
<!-- TODO -->
    </section>

<!--
TODO
(12:21:30) jinmei: I'd like to have sample session using a command line www client such as wget
(12:21:33) jinmei: btw
-->

  </chapter>

  <chapter id="bindctl">
    <title>Control and configure user interface</title>

    <note><para>
      For this development prototype release, <command>bindctl</command>
      is the only user interface. It is expected that upcoming
      releases will provide another interactive command-line
      interface and a web-based interface for controlling and
      configuring BIND 10.
    </para></note>

    <para>
      The <command>bindctl</command> tool provides an interactive
      prompt for configuring, controlling, and querying the BIND 10
      components.
      It communicates directly with a REST-ful interface over HTTPS
      provided by <command>b10-cmdctl</command>. It doesn't
      communicate to any other components directly.
    </para>

<!-- TODO: explain and show interface -->

    <para>
      Configuration changes are actually commands to
      <command>b10-cfgmgr</command>. So when <command>bindctl</command>
      sends a configuration, it is sent to <command>b10-cmdctl</command>
      (over a HTTPS connection); then <command>b10-cmdctl</command>
      sends the command (over a <command>b10-msgq</command> command
      channel) to <command>b10-cfgmgr</command> which then stores
      the details and relays (over a <command>b10-msgq</command> command
      channel) the configuration on to the specified module.
    </para>

    <para>
    </para>

  </chapter>

  <chapter id="authserver">
    <title>Authoritative Server</title>

    <para>
      The <command>b10-auth</command> is the authoritative DNS server.
      It supports EDNS0 and DNSSEC. It supports IPv6.
      Normally it is started by the <command>bind10</command> master
      process.
    </para>

    <section>
      <title>Server Configurations</title>

<!-- TODO: offers command line options but not used
since we used bind10 -->

      <para>
        <command>b10-auth</command> is configured via the
        <command>b10-cfgmgr</command> configuration manager.
        The module name is <quote>Auth</quote>.
        The configuration data item is:

        <variablelist>
    
          <varlistentry>
            <term>database_file</term>
            <listitem> 
              <simpara>This is an optional string to define the path to find
                 the SQLite3 database file.
<!-- TODO: -->
Note: Later the DNS server will use various data source backends.
This may be a temporary setting until then.
              </simpara>
            </listitem>
          </varlistentry>

        </variablelist>

      </para>

      <para>

        The configuration command is:

        <variablelist>

          <varlistentry>
            <term>shutdown</term>
            <listitem> 
              <simpara>Stop the authoritative DNS server.
              </simpara>
<!-- TODO: what happens when this is sent, will bind10 restart? -->
            </listitem>
          </varlistentry>

        </variablelist>

      </para>

<!-- TODO: examples of setting or running above? -->

    </section>

    <section>
      <title>Data Source Backends</title>

      <note><para>
        For the development prototype release, <command>b10-auth</command>
        supports a SQLite3 data source backend and in-memory data source
        backend.
        Upcoming versions will be able to use multiple different
        data sources, such as MySQL and Berkeley DB.
      </para></note>


      <para>
        By default, the SQLite3 backend uses the data file located at
        <filename>/usr/local/var/bind10-devel/zone.sqlite3</filename>.
        (The full path is what was defined at build configure time for
        <option>--localstatedir</option>.
        The default is <filename>/usr/local/var/</filename>.)
  This data file location may be changed by defining the
  <quote>database_file</quote> configuration.
      </para>

    </section>

    <section>
      <title>Loading Master Zones Files</title>

      <para>
        RFC 1035 style DNS master zone files may imported
        into a BIND 10 data source by using the
        <command>b10-loadzone</command> utility.
      </para>

      <para>
        <command>b10-loadzone</command> supports the following
        special directives (control entries):

        <variablelist>

          <varlistentry>
            <term>$INCLUDE</term>
            <listitem> 
              <simpara>Loads an additional zone file. This may be recursive.
              </simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>$ORIGIN</term>
            <listitem> 
              <simpara>Defines the relative domain name.
              </simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>$TTL</term>
            <listitem> 
              <simpara>Defines the time-to-live value used for following
                records that don't include a TTL.
              </simpara>
            </listitem>
          </varlistentry>

        </variablelist>

      </para>

      <para>
        The <option>-o</option> argument may be used to define the
        default origin for loaded zone file records.
      </para>

      <note>
      <para>
        In the development prototype release, only the SQLite3 back
        end is used.
        By default, it stores the zone data in
        <filename>/usr/local/var/bind10-devel/zone.sqlite3</filename>
        unless the <option>-d</option> switch is used to set the
        database filename.
        Multiple zones are stored in a single SQLite3 zone database.
      </para>
      </note>

      <para>
        If you reload a zone already existing in the database,
        all records from that prior zone disappear and a whole new set
        appears.
      </para>

<!--TODO: permissions for xfrin or loadzone to create the file -->

    </section>

<!--
TODO
    <section>
      <title>Troubleshooting</title>
      <para>
      </para>
    </section>
-->

  </chapter>

  <chapter id="xfrin">
    <title>Incoming Zone Transfers</title>

    <para>
      Incoming zones are transferred using the <command>b10-xfrin</command>
      process which is started by <command>bind10</command>.
      When received, the zone is stored in the BIND 10
      data store, and its records can be served by
      <command>b10-auth</command>.
      In combination with <command>b10-zonemgr</command> (for
      automated SOA checks), this allows the BIND 10 server to
      provide <quote>secondary</quote> service.
    </para>

    <note><simpara>
     The current development release of BIND 10 only supports
     AXFR. (IXFR is not supported.) 

<!-- TODO: sqlite3 data source only? -->

    </simpara></note>

<!-- TODO:

how to tell bind10 you are a secondary?

when will it first attempt to check for new zone? (using REFRESH?)
what if zonemgr is not running?

what if a NOTIFY is sent?

-->

    <para>
       To manually trigger a zone transfer to retrieve a remote zone,
       you may use the <command>bindctl</command> utility.
       For example, at the <command>bindctl</command> prompt run:

       <screen>&gt; <userinput>Xfrin retransfer zone_name="<option>foo.example.org</option>" master=<option>192.0.2.99</option></userinput></screen>
    </para>

<!-- TODO: can that retransfer be used to identify a new zone? -->
<!-- TODO: what if doesn't exist at that master IP? -->

  </chapter>

  <chapter id="xfrout">
    <title>Outbound Zone Transfers</title>

    <para>
      The <command>b10-xfrout</command> process is started by
      <command>bind10</command>.
      When the <command>b10-auth</command> authoritative DNS server
      receives an AXFR request, <command>b10-xfrout</command>
      sends the zone.
      This is used to provide master DNS service to share zones
      to secondary name servers.
      The <command>b10-xfrout</command> is also used to send
      NOTIFY messages to slaves.
    </para>

    <note><simpara>
     The current development release of BIND 10 only supports
     AXFR. (IXFR is not supported.) 
     Access control is not yet provided.
    </simpara></note>


<!--
TODO:
xfrout section:
auth servers checks for AXFR query
sends the XFR query to the xfrout module
uses /tmp/auth_xfrout_conn which is a socket
what is XfroutClient xfr_client??
/tmp/auth_xfrout_conn is not removed
-->

  </chapter>

  <chapter id="zonemgr">
    <title>Secondary Manager</title>

    <para>
      The <command>b10-zonemgr</command> process is started by
      <command>bind10</command>.
      It keeps track of SOA refresh, retry, and expire timers
      and other details for BIND 10 to perform as a slave.
      When the <command>b10-auth</command> authoritative DNS server
      receives a NOTIFY message, <command>b10-zonemgr</command>
      may tell <command>b10-xfrin</command> to do a refresh
      to start an inbound zone transfer.
      The secondary manager resets its counters when a new zone is
      transferred in.
    </para>

    <note><simpara>
     Access control (such as allowing notifies) is not yet provided.
     The primary/secondary service is not yet complete.
    </simpara></note>

<!-- TODO: lots to describe for zonemgr -->

  </chapter>

  <chapter id="resolverserver">
    <title>Recursive Name Server</title>

    <para>
      The <command>b10-resolver</command> process is started by
      <command>bind10</command>.
<!-- TODO
      It provides a resolver so DNS clients can ask it to do recursion
      and it will return answers.
-->
    </para>

    <para>
      The main <command>bind10</command> process can be configured
      to select to run either the authoritative or resolver.
      By default, it starts the authoritative service.
<!-- TODO: later both -->

      You may change this using <command>bindctl</command>, for example:

      <screen>
&gt; <userinput>config set Boss/start_auth false</userinput>
&gt; <userinput>config set Boss/start_resolver true</userinput>
&gt; <userinput>config commit</userinput>
</screen>

    </para>

    <para>
       The master <command>bind10</command> will stop and start
       the desired services.
    </para>

    <para>
      The resolver also needs to be configured to listen on an address
      and port:

      <screen>
&gt; <userinput>config set Resolver/listen_on [{ "address": "127.0.0.1", "port": 53 }]</userinput>
&gt; <userinput>config commit</userinput>
</screen>
    </para>

<!-- TODO: later the above will have some defaults -->

    <section>
      <title>Forwarding</title>

      <para>

        To enable forwarding, the upstream address and port must be
        configured to forward queries to, such as:

        <screen>
&gt; <userinput>config set Resolver/forward_addresses [{ "address": "<replaceable>192.168.1.1</replaceable>", "port": 53 }]</userinput>
&gt; <userinput>config commit</userinput>
</screen>

        (Replace <replaceable>192.168.1.1</replaceable> to point to your
        full resolver.)
      </para>

      <para>
        Normal iterative name service can be re-enabled by clearing the
        forwarding address(es); for example:

        <screen>
&gt; <userinput>config set Resolver/forward_addresses []</userinput>
&gt; <userinput>config commit</userinput>
</screen>
      </para>

    </section>

<!-- TODO: later try this

> config set Resolver/forward_addresses[0]/address "192.168.8.8"
> config set Resolver/forward_addresses[0]/port 53
then change those defaults with config set Resolver/forward_addresses[0]/address "1.2.3.4"
> config set Resolver/forward_addresses[0]/address "1.2.3.4"
-->

  </chapter>

  <chapter id="statistics">
    <title>Statistics</title>

    <para>
      The <command>b10-stats</command> process is started by
      <command>bind10</command>.
      It periodically collects statistics data from various modules
      and aggregates it.
<!-- TODO -->
    </para>

    <para>

<!-- TODO -->
       This stats daemon provides commands to identify if it is
       running, show specified or all statistics data, show specified
       or all statistics data schema, and set specified statistics
       data.

       For example, using <command>bindctl</command>:

<!-- TODO -->
       <screen>
&gt; <userinput>Stats show</userinput>
{
    "Auth": {
        "queries.tcp": 1749,
        "queries.udp": 867868
    },
    "Boss": {
        "boot_time": "2011-01-20T16:59:03Z"
    },
    "Stats": {
        "boot_time": "2011-01-20T16:59:05Z",
        "last_update_time": "2011-01-20T17:04:05Z",
        "lname": "4d3869d9_a@jreed.example.net",
        "report_time": "2011-01-20T17:04:06Z",
        "timestamp": 1295543046.823504
    }
}
       </screen>
    </para>

  </chapter>

  <chapter id="logging">
    <title>Logging</title>

    <section>
      <title>Logging configuration</title>

      <para>

	The logging system in BIND 10 is configured through the
	Logging module. All BIND 10 modules will look at the
	configuration in Logging to see what should be logged and
	to where.

<!-- TODO: what is context of Logging module for readers of this guide? -->

      </para>

      <section>
        <title>Loggers</title>

        <para>

	  Within BIND 10, a message is logged through a component
	  called a "logger". Different parts of BIND 10 log messages
	  through different loggers, and each logger can be configured
	  independently of one another.

        </para>

        <para>

	  In the Logging module, you can specify the configuration
	  for zero or more loggers; any that are not specified will
	  take appropriate default values..

        </para>

        <para>

	  The three most important elements of a logger configuration
	  are the <option>name</option> (the component that is
	  generating the messages), the <option>severity</option>
	  (what to log), and the <option>output_options</option>
	  (where to log).

        </para>

        <section>
          <title>name (string)</title>

          <para>
	  Each logger in the system has a name, the name being that
	  of the component using it to log messages. For instance,
	  if you want to configure logging for the resolver module,
	  you add an entry for a logger named <quote>Resolver</quote>. This
	  configuration will then be used by the loggers in the
	  Resolver module, and all the libraries used by it.
              </para>

<!-- TODO: later we will have a way to know names of all modules

Right now you can only see what their names are if they are running
(a simple 'help' without anything else in bindctl for instance).

 -->

        <para>

	  If you want to specify logging for one specific library
	  within the module, you set the name to
	  <replaceable>module.library</replaceable>.  For example, the
	  logger used by the nameserver address store component
	  has the full name of <quote>Resolver.nsas</quote>. If
	  there is no entry in Logging for a particular library,
	  it will use the configuration given for the module.

<!-- TODO: how to know these specific names?

We will either have to document them or tell the administrator to
specify module-wide logging and see what appears...

-->

        </para>

        <para>

<!-- TODO: severity has not been covered yet -->

	  To illustrate this, suppose you want the cache library
	  to log messages of severity DEBUG, and the rest of the
	  resolver code to log messages of severity INFO. To achieve
	  this you specify two loggers, one with the name
	  <quote>Resolver</quote> and severity INFO, and one with
	  the name <quote>Resolver.cache</quote> with severity
	  DEBUG. As there are no entries for other libraries (e.g.
	  the nsas), they will use the configuration for the module
	  (<quote>Resolver</quote>), so giving the desired behavior.

        </para>

        <para>

	  One special case is that of a module name of <quote>*</quote>
	  (asterisks), which is interpreted as <emphasis>any</emphasis>
	  module. You can set global logging options by using this,
	  including setting the logging configuration for a library
	  that is used by multiple modules (e.g. <quote>*.config</quote>
	  specifies the configuration library code in whatever
	  module is using it).

        </para>

        <para>

	  If there are multiple logger specifications in the
	  configuration that might match a particular logger, the
	  specification with the more specific logger name takes
	  precedence. For example, if there are entries for for
	  both <quote>*</quote> and <quote>Resolver</quote>, the
	  resolver module &mdash; and all libraries it uses &mdash;
	  will log messages according to the configuration in the
	  second entry (<quote>Resolver</quote>). All other modules
	  will use the configuration of the first entry
	  (<quote>*</quote>). If there was also a configuration
	  entry for <quote>Resolver.cache</quote>, the cache library
	  within the resolver would use that in preference to the
	  entry for <quote>Resolver</quote>.

        </para>

        <para>

	  One final note about the naming. When specifying the
	  module name within a logger, use the name of the module
	  as specified in <command>bindctl</command>, e.g.
	  <quote>Resolver</quote> for the resolver module,
	  <quote>Xfrout</quote> for the xfrout module, etc. When
	  the message is logged, the message will include the name
	  of the logger generating the message, but with the module
	  name replaced by the name of the process implementing
	  the module (so for example, a message generated by the
	  <quote>Auth.cache</quote> logger will appear in the output
	  with a logger name of <quote>b10-auth.cache</quote>).

        </para>

        </section>

        <section>
          <title>severity (string)</title>

        <para>

          This specifies the category of messages logged.
	  Each message is logged with an associated severity which
	  may be one of the following (in descending order of
	  severity):
        </para>

        <itemizedlist>
          <listitem>
            <simpara> FATAL </simpara>
          </listitem>

          <listitem>
            <simpara> ERROR </simpara>
          </listitem>

          <listitem>
            <simpara> WARN </simpara>
          </listitem>

          <listitem>
            <simpara> INFO </simpara>
          </listitem>

          <listitem>
            <simpara> DEBUG </simpara>
          </listitem>
        </itemizedlist>

        <para>

	  When the severity of a logger is set to one of these
	  values, it will only log messages of that severity, and
	  the severities above it. The severity may also be set to
	  NONE, in which case all messages from that logger are
	  inhibited.

<!-- TODO: worded wrong? If I set to INFO, why would it show DEBUG which is literally below in that list? -->

        </para>

        </section>

        <section>
          <title>output_options (list)</title>

        <para>

	  Each logger can have zero or more
	  <option>output_options</option>. These specify where log
	  messages are sent to. These are explained in detail below.

        </para>

        <para>

          The other options for a logger are:

        </para>

        </section>

        <section>
          <title>debuglevel (integer)</title>

        <para>

	  When a logger's severity is set to DEBUG, this value
	  specifies what debug messages should be printed. It ranges
	  from 0 (least verbose) to 99 (most verbose).
        </para>


<!-- TODO: complete this sentence:

	  The general classification of debug message types is

TODO; there's a ticket to determine these levels, see #1074

 -->

        <para>

          If severity for the logger is not DEBUG, this value is ignored.

        </para>

        </section>

        <section>
          <title>additive (true or false)</title>

        <para>

	  If this is true, the <option>output_options</option> from
	  the parent will be used. For example, if there are two
	  loggers configured; <quote>Resolver</quote> and
	  <quote>Resolver.cache</quote>, and <option>additive</option>
	  is true in the second, it will write the log messages
	  not only to the destinations specified for
	  <quote>Resolver.cache</quote>, but also to the destinations
	  as specified in the <option>output_options</option> in
	  the logger named <quote>Resolver</quote>.

<!-- TODO: check this -->

      </para>

      </section>

      </section>

      <section>
        <title>Output Options</title>

        <para>

	  The main settings for an output option are the
	  <option>destination</option> and a value called
	  <option>output</option>, the meaning of which depends on
	  the destination that is set.

        </para>

        <section>
          <title>destination (string)</title>

          <para>

            The destination is the type of output. It can be one of:

          </para>

          <itemizedlist>

            <listitem>
              <simpara> console </simpara>
          </listitem>

            <listitem>
              <simpara> file </simpara>
          </listitem>

            <listitem>
              <simpara> syslog </simpara>
            </listitem>

          </itemizedlist>

        </section>

        <section>
          <title>output (string)</title>

        <para>

	  Depending on what is set as the output destination, this
	  value is interpreted as follows:

        </para>

        <variablelist>

          <varlistentry>
            <term><option>destination</option> is <quote>console</quote></term>
            <listitem>
              <simpara>
		 The value of output must be one of <quote>stdout</quote>
		 (messages printed to standard output) or
		 <quote>stderr</quote> (messages printed to standard
		 error).
              </simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>destination</option> is <quote>file</quote></term>
            <listitem>
              <simpara>
		The value of output is interpreted as a file name;
		log messages will be appended to this file.
              </simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>destination</option> is <quote>syslog</quote></term>
            <listitem>
              <simpara>
		The value of output is interpreted as the
		<command>syslog</command> facility (e.g.
		<emphasis>local0</emphasis>) that should be used
		for log messages.
              </simpara>
            </listitem>
          </varlistentry>

        </variablelist>

        <para>

          The other options for <option>output_options</option> are:

        </para>

        <section>
          <title>flush (true of false)</title>

          <para>
	    Flush buffers after each log message. Doing this will
	    reduce performance but will ensure that if the program
	    terminates abnormally, all messages up to the point of
	    termination are output.
          </para>

        </section>

        <section>
          <title>maxsize (integer)</title>

          <para>
	    Only relevant when destination is file, this is maximum
	    file size of output files in bytes. When the maximum
	    size is reached, the file is renamed and a new file opened.
	    (For example, a ".1" is appended to the name &mdash;
	    if a ".1" file exists, it is renamed ".2",
            etc.)
          </para>

          <para>
            If this is 0, no maximum file size is used.
          </para>

        </section>

        <section>
          <title>maxver (integer)</title>

          <para>
	    Maximum number of old log files to keep around when
	    rolling the output file. Only relevant when
	    <option>destination</option> is <quote>file</quote>.
          </para>

        </section>

      </section>

      </section>

      <section>
        <title>Example session</title>

        <para>

	  In this example we want to set the global logging to
	  write to the file <filename>/var/log/my_bind10.log</filename>,
	  at severity WARN. We want the authoritative server to
	  log at DEBUG with debuglevel 40, to a different file
	  (<filename>/tmp/debug_messages</filename>).

        </para>

        <para>

          Start <command>bindctl</command>.

        </para>

        <para>

           <screen>["login success "]
&gt; <userinput>config show Logging</userinput>
Logging/loggers	[]	list
</screen>

        </para>

        <para>

	  By default, no specific loggers are configured, in which
	  case the severity defaults to INFO and the output is
	  written to stderr.

        </para>

        <para>

          Let's first add a default logger:

        </para>

<!-- TODO: adding the empty loggers makes no sense -->
        <para>

          <screen><userinput>&gt; config add Logging/loggers</userinput>
&gt; <userinput>config show Logging</userinput>
Logging/loggers/	list	(modified)
</screen>

        </para>

        <para>

	  The loggers value line changed to indicate that it is no
	  longer an empty list:

        </para>

        <para>

          <screen>&gt; <userinput>config show Logging/loggers</userinput>
Logging/loggers[0]/name	""	string	(default)
Logging/loggers[0]/severity	"INFO"	string	(default)
Logging/loggers[0]/debuglevel	0	integer	(default)
Logging/loggers[0]/additive	false	boolean	(default)
Logging/loggers[0]/output_options	[]	list	(default)
</screen>

        </para>

        <para>

	  The name is mandatory, so we must set it. We will also
	  change the severity as well. Let's start with the global
	  logger.

        </para>

        <para>

          <screen>&gt; <userinput>config set Logging/loggers[0]/name *</userinput>
&gt; <userinput>config set Logging/loggers[0]/severity WARN</userinput>
&gt; <userinput>config show Logging/loggers</userinput>
Logging/loggers[0]/name	"*"	string	(modified)
Logging/loggers[0]/severity	"WARN"	string	(modified)
Logging/loggers[0]/debuglevel	0	integer	(default)
Logging/loggers[0]/additive	false	boolean	(default)
Logging/loggers[0]/output_options	[]	list	(default)
</screen>

        </para>

        <para>

	  Of course, we need to specify where we want the log
	  messages to go, so we add an entry for an output option.

        </para>

        <para>

          <screen>&gt; <userinput> config add Logging/loggers[0]/output_options</userinput>
&gt; <userinput> config show Logging/loggers[0]/output_options</userinput>
Logging/loggers[0]/output_options[0]/destination	"console"	string	(default)
Logging/loggers[0]/output_options[0]/output	"stdout"	string	(default)
Logging/loggers[0]/output_options[0]/flush	false	boolean	(default)
Logging/loggers[0]/output_options[0]/maxsize	0	integer	(default)
Logging/loggers[0]/output_options[0]/maxver	0	integer	(default)
</screen>


        </para>

        <para>

          These aren't the values we are looking for.

        </para>

        <para>

          <screen>&gt; <userinput> config set Logging/loggers[0]/output_options[0]/destination file</userinput>
&gt; <userinput> config set Logging/loggers[0]/output_options[0]/output /var/log/bind10.log</userinput>
&gt; <userinput> config set Logging/loggers[0]/output_options[0]/maxsize 30000</userinput>
&gt; <userinput> config set Logging/loggers[0]/output_options[0]/maxver 8</userinput>
</screen>

        </para>

        <para>

	  Which would make the entire configuration for this logger
	  look like:

        </para>

        <para>

          <screen>&gt; <userinput> config show all Logging/loggers</userinput>
Logging/loggers[0]/name	"*"	string	(modified)
Logging/loggers[0]/severity	"WARN"	string	(modified)
Logging/loggers[0]/debuglevel	0	integer	(default)
Logging/loggers[0]/additive	false	boolean	(default)
Logging/loggers[0]/output_options[0]/destination	"file"	string	(modified)
Logging/loggers[0]/output_options[0]/output	"/var/log/bind10.log"	string	(modified)
Logging/loggers[0]/output_options[0]/flush	false	boolean	(default)
Logging/loggers[0]/output_options[0]/maxsize	30000	integer	(modified)
Logging/loggers[0]/output_options[0]/maxver	8	integer	(modified)
</screen>

        </para>

        <para>

	  That looks OK, so let's commit it before we add the
	  configuration for the authoritative server's logger.

        </para>

        <para>

          <screen>&gt; <userinput> config commit</userinput></screen>

        </para>

        <para>

	  Now that we have set it, and checked each value along
	  the way, adding a second entry is quite similar.

        </para>

        <para>

          <screen>&gt; <userinput> config add Logging/loggers</userinput>
&gt; <userinput> config set Logging/loggers[1]/name Auth</userinput>
&gt; <userinput> config set Logging/loggers[1]/severity DEBUG</userinput>
&gt; <userinput> config set Logging/loggers[1]/debuglevel 40</userinput>
&gt; <userinput> config add Logging/loggers[1]/output_options</userinput>
&gt; <userinput> config set Logging/loggers[1]/output_options[0]/destination file</userinput>
&gt; <userinput> config set Logging/loggers[1]/output_options[0]/output /tmp/auth_debug.log</userinput>
&gt; <userinput> config commit</userinput>
</screen>

        </para>

        <para>

	  And that's it. Once we have found whatever it was we
	  needed the debug messages for, we can simply remove the
	  second logger to let the authoritative server use the
	  same settings as the rest.

        </para>

        <para>

          <screen>&gt; <userinput> config remove Logging/loggers[1]</userinput>
&gt; <userinput> config commit</userinput>
</screen>

        </para>

        <para>

	  And every module will now be using the values from the
	  logger named <quote>*</quote>.

        </para>

      </section>

    </section>

    <section>
      <title>Logging Message Format</title>

      <para>
	  Each message written by BIND 10 to the configured logging
	  destinations comprises a number of components that identify
	  the origin of the message and, if the message indicates
	  a problem, information about the problem that may be
	  useful in fixing it.
      </para>

      <para>
          Consider the message below logged to a file:
          <screen>2011-06-15 13:48:22.034 ERROR [b10-resolver.asiolink]
    ASIODNS_OPENSOCK error 111 opening TCP socket to 127.0.0.1(53)</screen>
      </para>

      <para>
        Note: the layout of messages written to the system logging
        file (syslog) may be slightly different.  This message has
        been split across two lines here for display reasons; in the
        logging file, it will appear on one line.)
      </para>

      <para>
        The log message comprises a number of components:

          <variablelist>
          <varlistentry>
          <term>2011-06-15 13:48:22.034</term>
<!-- TODO: timestamp repeated even if using syslog? -->
          <listitem><para>
              The date and time at which the message was generated.
          </para></listitem>
          </varlistentry>

          <varlistentry>
          <term>ERROR</term>
          <listitem><para>
              The severity of the message.
          </para></listitem>
          </varlistentry>

          <varlistentry>
          <term>[b10-resolver.asiolink]</term>
          <listitem><para>
            The source of the message.  This comprises two components:
            the BIND 10 process generating the message (in this
            case, <command>b10-resolver</command>) and the module
            within the program from which the message originated
            (which in the example is the asynchronous I/O link
            module, asiolink).
          </para></listitem>
          </varlistentry>

          <varlistentry>
          <term>ASIODNS_OPENSOCK</term>
          <listitem><para>
	    The message identification.  Every message in BIND 10
	    has a unique identification, which can be used as an
	    index into the <ulink
	    url="bind10-messages.html"><citetitle>BIND 10 Messages
	    Manual</citetitle></ulink> (<ulink
	    url="http://bind10.isc.org/docs/bind10-messages.html"
	    />) from which more information can be obtained.
          </para></listitem>
          </varlistentry>

          <varlistentry>
          <term>error 111 opening TCP socket to 127.0.0.1(53)</term>
          <listitem><para>
	      A brief description of the cause of the problem.
	      Within this text, information relating to the condition
	      that caused the message to be logged will be included.
	      In this example, error number 111 (an operating
	      system-specific error number) was encountered when
	      trying to open a TCP connection to port 53 on the
	      local system (address 127.0.0.1).  The next step
	      would be to find out the reason for the failure by
	      consulting your system's documentation to identify
	      what error number 111 means.
          </para></listitem>
          </varlistentry>
          </variablelist>
      </para>

    </section>

  </chapter>

<!-- TODO: how to help: run unit tests, join lists, review trac tickets -->

  <!-- <index>    <title>Index</title> </index> -->

</book>

<!--

TODO:

Overview

Getting BIND 10 Installed
  Basics
  Dependencies
  Optional
  Advanced

How Does Everything Work Together?

Need Help?

-->
