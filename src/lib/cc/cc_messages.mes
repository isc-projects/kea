# Copyright (C) 2010  Internet Systems Consortium, Inc. ("ISC")
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

$NAMESPACE isc::cc

% CC_ASYNC_READ_FAILED asynchronous read failed (error code = %1)
This marks a low level error, we tried to read data from the message queue
daemon asynchronously, but the ASIO library returned an error.

% CC_CONN_ERROR error connecting to message queue (%1)
It is impossible to reach the message queue daemon for the reason given. It
is unlikely there'll be reason for whatever program this currently is to
continue running, as the communication with the rest of BIND 10 is vital
for the components.

% CC_DISCONNECT disconnecting from message queue daemon
The library is disconnecting from the message queue daemon. This debug message
indicates that the program is trying to shut down gracefully.

% CC_ESTABLISH trying to establish connection with message queue daemon at %1
This debug message indicates that the command channel library is about to
connect to the message queue daemon, which should be listening on the UNIX-domain
socket listed in the output.

% CC_ESTABLISHED successfully connected to message queue daemon
This debug message indicates that the connection was successfully made, this
should follow CC_ESTABLISH.

% CC_GROUP_RECEIVE trying to receive a message with seq %1
Debug message, noting that a message is expected to come over the command
channel.

% CC_GROUP_RECEIVED message arrived ('%1', '%2')
Debug message, noting that we successfully received a message (its envelope and
payload listed). This follows CC_GROUP_RECEIVE, but might happen some time
later, depending if we waited for it or just polled.

% CC_GROUP_SEND sending message '%1' to group '%2'
Debug message, we're about to send a message over the command channel.

% CC_INVALID_LENGTHS invalid length parameters (%1, %2)
This happens when garbage comes over the command channel or some kind of
confusion happens in the program. The data received from the socket make no
sense if we interpret it as lengths of message. The first one is total length
of the message; the second is the length of the header. The header
and its length (2 bytes) is counted in the total length.

% CC_LENGTH_NOT_READY length not ready
There should be data representing the length of message on the socket, but it
is not there.

% CC_LNAME_RECEIVED received local name: %1
Debug message: the local module received its unique identifier (name)
from msgq on completion of establishing the session with msgq.

% CC_NO_MESSAGE no message ready to be received yet
The program polled for incoming messages, but there was no message waiting.
This is a debug message which may happen only after CC_GROUP_RECEIVE.

% CC_NO_MSGQ unable to connect to message queue (%1)
It isn't possible to connect to the message queue daemon, for reason listed.
It is unlikely any program will be able continue without the communication.

% CC_READ_ERROR error reading data from command channel (%1)
A low level error happened when the library tried to read data from the
command channel socket. The reason is listed.

% CC_READ_EXCEPTION error reading data from command channel (%1)
We received an exception while trying to read data from the command
channel socket. The reason is listed.

% CC_REPLY replying to message from '%1' with '%2'
Debug message, noting we're sending a response to the original message
with the given envelope.

% CC_SET_TIMEOUT setting timeout to %1ms
Debug message. A timeout for which the program is willing to wait for a reply
is being set.

% CC_START_READ starting asynchronous read
Debug message. From now on, when a message (or command) comes, it'll wake the
program and the library will automatically pass it over to correct place.

% CC_SUBSCRIBE subscribing to communication group %1
Debug message. The program wants to receive messages addressed to this group.

% CC_TIMEOUT timeout reading data from command channel
The program waited too long for data from the command channel (usually when it
sent a query to different program and it didn't answer for whatever reason).

% CC_UNSUBSCRIBE unsubscribing from communication group %1
Debug message. The program no longer wants to receive messages addressed to
this group.

% CC_WRITE_ERROR error writing data to command channel (%1)
A low level error happened when the library tried to write data to the command
channel socket.

% CC_ZERO_LENGTH invalid message length (0)
The library received a message length being zero, which makes no sense, since
all messages must contain at least the envelope.
